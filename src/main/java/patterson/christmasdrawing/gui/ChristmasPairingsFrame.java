package patterson.christmasdrawing.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import patterson.christmasdrawing.util.DynamicTable;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.TableModel;
import java.awt.Insets;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

public class ChristmasPairingsFrame {
    private JPanel mainPanel;
    private JScrollPane mainScrollPane;
    private JTable mainTable;
    private JButton btnClose;
    private JButton btnExport;

    public ChristmasPairingsFrame() {
        btnClose.addActionListener(e -> {
            SwingUtilities.getRoot(mainPanel).setVisible(false);
        });

        btnExport.addActionListener(e -> {
            Workbook workbook = new XSSFWorkbook();
            Sheet sheet = workbook.createSheet("Christmas Pairs");
            TableModel tableModel = mainTable.getModel();

            tableModel.getValueAt(0, 0);
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                Row row = sheet.createRow(i);
                for (int j = 0; j < 2; j++) {
                    Cell cell = row.createCell(j);
                    cell.setCellValue((String) tableModel.getValueAt(i, j));
                }
            }

            try (FileOutputStream outputStream = new FileOutputStream("ChristmasPairings.xlsx")) {
                workbook.write(outputStream);
            } catch (IOException fileNotFoundException) {
                fileNotFoundException.printStackTrace();
            }
        });
    }

    public void setTableContents(Map<String, String> pairMap) {
        List<List<String>> dataList = new ArrayList<>();
        List<String> columnNames = Arrays.asList("Person A", "Person B");
        for (Map.Entry<String, String> entry : pairMap.entrySet()) {
            dataList.add(Arrays.asList(entry.getKey(), entry.getValue()));
        }

        DynamicTable dynamicTable = new DynamicTable(dataList, columnNames);
        mainTable.setModel(dynamicTable.getTableModel());
    }

    public JPanel getMainPanel() {
        return mainPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainScrollPane = new JScrollPane();
        mainPanel.add(mainScrollPane, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        mainTable = new JTable();
        mainScrollPane.setViewportView(mainTable);
        btnClose = new JButton();
        btnClose.setText("Close");
        mainPanel.add(btnClose, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btnExport = new JButton();
        btnExport.setText("Export");
        mainPanel.add(btnExport, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
